{"version":3,"file":"index.js","mappings":";;;;;;;;;;AAAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNA,uEAAuE;AAChB;AAOvD,IAAI,UAAc,CAAC;AAEnB,SAAS,YAAY;IACnB,6BAA6B;IAC7B,UAAU,GAAG,IAAI,mDAAa,CAAC;QAC7B,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;QACX,cAAc,EAAE;YACd,OAAO,EAAE,+EAAiC;YAC1C,OAAO,EAAE,IAAI;YACb,gBAAgB,EAAE,IAAI;SACvB;KACF,CAAC,CAAC;IAEH,sCAAsC;IACtC,UAAU,CAAC,OAAO,CAAC,mCAAyB,CAAC,CAAC,CAAC,6BAA6B;IAE5E,qBAAqB;IACrB,wCAAwC;AAC1C,CAAC;AAED,wDAAwD;AACxD,yDAAyD;AACzD,sDAAsD;AACtD,yCAAG,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;IACxB,YAAY,EAAE,CAAC;IAEf,yCAAG,CAAC,EAAE,CAAC,UAAU,EAAE;QACjB,iEAAiE;QACjE,4DAA4D;QAC5D,IAAI,mDAAa,CAAC,aAAa,EAAE,CAAC,MAAM,KAAK,CAAC;YAAE,YAAY,EAAE,CAAC;IACjE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,wEAAwE;AACxE,0EAA0E;AAC1E,2BAA2B;AAC3B,yCAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE;IAC1B,IAAI,OAAO,CAAC,QAAQ,KAAK,QAAQ;QAAE,yCAAG,CAAC,IAAI,EAAE,CAAC;AAChD,CAAC,CAAC,CAAC;AAEH,6CAAO,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAU,EAAE,IAAY,EAAE,EAAE;IAC3C,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;KAC9C;AACH,CAAC,CAAC,CAAC;AAEH,4EAA4E;AAC5E,uEAAuE","sources":["webpack://stevie-task-manager/external node-commonjs \"electron\"","webpack://stevie-task-manager/webpack/bootstrap","webpack://stevie-task-manager/webpack/runtime/compat get default export","webpack://stevie-task-manager/webpack/runtime/define property getters","webpack://stevie-task-manager/webpack/runtime/hasOwnProperty shorthand","webpack://stevie-task-manager/webpack/runtime/make namespace object","webpack://stevie-task-manager/./src/main/main.ts"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Modules to control application life and create native browser window\nimport { app, BrowserWindow, ipcMain } from \"electron\";\nimport type { BrowserWindow as EB } from \"electron\";\n// import path from \"path\";\n\ndeclare const MAIN_WINDOW_WEBPACK_ENTRY: string;\ndeclare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;\n\nlet mainWindow: EB;\n\nfunction createWindow() {\n  // Create the browser window.\n  mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY, // path.join(__dirname, 'preload', 'preload.js'),\n      sandbox: true,\n      contextIsolation: true,\n    },\n  });\n\n  // and load the index.html of the app.\n  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY); //'./build-view/index.html');\n\n  // Open the DevTools.\n  // mainWindow.webContents.openDevTools()\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  createWindow();\n\n  app.on(\"activate\", function () {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow();\n  });\n});\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on(\"window-all-closed\", function () {\n  if (process.platform !== \"darwin\") app.quit();\n});\n\nipcMain.on(\"A\", (_: unknown, arg1: string) => {\n  if (arg1 === \"getDate\") {\n    mainWindow.webContents.send(\"B\", new Date());\n  }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n"],"names":[],"sourceRoot":""}